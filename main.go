package main

import (
	"cohost/internal/audio"
	"cohost/internal/config"
	"cohost/internal/response"
	"cohost/internal/storage"
	"cohost/internal/stream"
	gui "cohost/internal/ui"
	"fmt"
	"github.com/joho/godotenv"
	"log"
	"os"
	"runtime/debug"
	"strings"
	"sync"
	"time"
)

// –û—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π (üîÑ –±—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
var messageQueue []string
var messageQueueLock sync.Mutex                    // üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const messageProcessingInterval = 10 * time.Second // ‚è≥ –†–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—á–µ—Ä–µ–¥—å
func queueMessage(username, message string) {
	messageQueueLock.Lock()
	defer messageQueueLock.Unlock()

	messageQueue = append(messageQueue, fmt.Sprintf("%s: %s", username, message))
	log.Println("üì• –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å:", username, "-", message)
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏
func processMessageQueue() {
	for {
		time.Sleep(messageProcessingInterval) // ‚è≥ –ñ–¥—ë–º 10 —Å–µ–∫—É–Ω–¥

		messageQueueLock.Lock()
		if len(messageQueue) == 0 {
			messageQueueLock.Unlock()
			continue // –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
		}

		// üî• –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ AI
		combinedMessages := strings.Join(messageQueue, "\n")
		messageQueue = nil // üßπ –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å

		messageQueueLock.Unlock()

		log.Println("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è:", combinedMessages)

		// üì¢ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç–≤–µ—Ç
		//ai.GenerateAIResponse("—á–∞—Ç", combinedMessages)
	}
}

// üèÅ –ó–∞–ø—É—Å–∫ GUI
func main() {
	defer func() {
		if r := recover(); r != nil {
			fmt.Println("–ü–∞–Ω–∏–∫–∞ –ø–æ–π–º–∞–Ω–∞!", r)
			debug.PrintStack()
			os.Exit(1)
		}
	}()

	log.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")

	err := godotenv.Load()
	if err != nil {
		log.Println("‚ö†Ô∏è .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")
	}

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
	config.LoadSettings() // üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ–ª–æ—Å –∏ –≥—Ä–æ–º–∫–æ—Å—Ç—å
	storage.LoadUsers()   // üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	storage.LoadChatHistory()
	gui.CreateGUI(stream.StartTwitchBot, audio.StartAudioPlayer, response.ListenVoiceCommands, stream.StartTikTokListener)

	log.Println("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}
