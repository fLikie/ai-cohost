package audio

import (
	"bytes"
	"cohost/internal/common"
	"cohost/internal/config"
	"fmt"
	"github.com/faiface/beep"
	"github.com/faiface/beep/effects"
	"github.com/faiface/beep/mp3"
	"github.com/faiface/beep/speaker"
	"github.com/faiface/beep/wav"
	"github.com/go-resty/resty/v2"
	"io"
	"io/ioutil"
	"log"
	"os"
	"regexp"
	"time"
)

const AudioQueueMax = 10

var audioQueue = make(chan []byte, AudioQueueMax) // –û—á–µ—Ä–µ–¥—å –∑–≤—É–∫–æ–≤ (–¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
var initialized = false
var volumeControl *effects.Volume // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
var volumeLevel = 1.0             // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥—Ä–æ–º–∫–æ—Å—Ç—å 100%

// üéµ –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
func StartAudioPlayer() {
	go func() {
		for audioData := range audioQueue {
			playAudio(audioData) // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
		}
	}()
}

// üîä –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥—å
func QueueAudio(audioData []byte) {
	select {
	case audioQueue <- audioData:
		log.Println("üéµ –î–æ–±–∞–≤–ª–µ–Ω –∑–≤—É–∫ –≤ –æ—á–µ—Ä–µ–¥—å")
	default:
		log.Println("‚ö†Ô∏è –û—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–≤—É–∫")
	}
}

// üîä –§—É–Ω–∫—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∫–æ–π –≥—Ä–æ–º–∫–æ—Å—Ç–∏
func playAudio(audioData []byte) {
	if len(audioData) == 0 {
		log.Println("‚ùå –û—à–∏–±–∫–∞: –ü—É—Å—Ç–æ–π –∞—É–¥–∏–æ—Ñ–∞–π–ª!")
		return
	}

	reader := bytes.NewReader(audioData)
	buf := make([]byte, 12)
	if _, err := reader.Read(buf); err != nil {
		log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞:", err)
		return
	}
	reader.Seek(0, io.SeekStart) // –°–±—Ä–æ—Å –∫ –Ω–∞—á–∞–ª—É

	var streamer beep.StreamSeekCloser
	var format beep.Format
	var err error

	switch {
	case bytes.HasPrefix(buf, []byte("RIFF")):
		// WAV-—Ñ–∞–π–ª
		log.Println("üìÄ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç: WAV")
		streamer, format, err = wav.Decode(reader)
	case bytes.HasPrefix(buf, []byte("\xFF\xFB")) || bytes.HasPrefix(buf, []byte("\x49\x44\x33")):
		// MP3-—Ñ–∞–π–ª (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å FF FB –∏–ª–∏ ID3)
		log.Println("üìÄ –û–ø—Ä–µ–¥–µ–ª—ë–Ω —Ñ–æ—Ä–º–∞—Ç: MP3")
		streamer, format, err = mp3.Decode(reader)
	default:
		log.Println("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ")
		saveMP3Debug(audioData)
		return
	}

	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:", err)
		saveMP3Debug(audioData)
		return
	}

	if !initialized {
		speaker.Init(format.SampleRate, format.SampleRate.N(time.Second/10))
		initialized = true
	}

	if volumeControl != nil {
		speaker.Lock()
		volumeControl.Streamer = streamer
		speaker.Unlock()
	} else {
		volumeControl = &effects.Volume{
			Streamer: streamer,
			Base:     2,
			Volume:   (config.Settings.VolumeLevel * 2) - 2,
			Silent:   false,
		}
	}

	done := make(chan struct{})
	speaker.Play(beep.Seq(volumeControl, beep.Callback(func() {
		close(done)
	})))
	<-done
	log.Println("üéµ –ê—É–¥–∏–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}

func saveMP3Debug(mp3Data []byte) {
	err := ioutil.WriteFile("test_raw.txt", mp3Data, 0644)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è MP3 –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç:", err)
	} else {
		log.Println("‚úÖ –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ MP3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ test_raw.txt")
	}
}

func UpdateVolume(newVolume float64) {
	if volumeControl != nil {
		speaker.Lock() // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫ –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç–∏

		// üî• –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å: -5 = –ø–æ—á—Ç–∏ —Ç–∏—à–∏–Ω–∞, 0 = –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è, +2 = –≥—Ä–æ–º—á–µ
		volumeControl.Volume = (newVolume * 2) - 2 // –ü–µ—Ä–µ–≤–æ–¥–∏–º 0-1 –≤ -5 –¥–æ +2

		speaker.Unlock() // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫
		log.Println("üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", volumeControl.Volume)
	}
}

// üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ ElevenLabs
func GenerateVoice(text string) {
	client := resty.New()
	voiceID := common.Voices[config.Settings.SelectedVoice] // –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞
	url := fmt.Sprintf("https://api.elevenlabs.io/v1/text-to-speech/%s", voiceID)

	elevenLabsKey := os.Getenv("ELEVENLABS_KEY")

	resp, err := client.R().
		SetHeader("xi-api-key", elevenLabsKey).
		SetHeader("Content-Type", "application/json").
		SetBody(map[string]interface{}{
			"text":             text, // üî• –ù–æ–≤—ã–π –≥–æ–ª–æ—Å "Sarah"
			"model_id":         "eleven_multilingual_v2",
			"language_id":      "ru",
			"stability":        volumeLevel, // üì¢ –ì—Ä–æ–º–∫–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∑–≤—É–∫–∞
			"similarity_boost": 0.8,         // –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		}).
		Post(url)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ ElevenLabs:", err)
		return
	}

	log.Println("‚úÖ MP3 —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:", len(resp.Body()), "–±–∞–π—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å")
	QueueAudio(resp.Body()) // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –≤ –æ—á–µ—Ä–µ–¥—å
}

func cleanTextForTTS(text string) string {
	re := regexp.MustCompile(`[^\p{L}\p{N}\p{P}\p{Z}]`) // —É–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
	return re.ReplaceAllString(text, "")
}

func GenerateSileroVoice(text string) {
	client := resty.New()
	url := "http://185.21.142.27/speak"

	cleaned := cleanTextForTTS(text)

	resp, err := client.R().
		SetHeader("Content-Type", "application/json").
		SetBody([]string{cleaned}).
		Post(url)

	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ Silero TTS:", err)
		return
	}

	log.Println("‚úÖ MP3 —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:", len(resp.Body()), "–±–∞–π—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å")
	QueueAudio(resp.Body()) // –î–æ–±–∞–≤–ª—è–µ–º –∑–≤—É–∫ –≤ –æ—á–µ—Ä–µ–¥—å
}
