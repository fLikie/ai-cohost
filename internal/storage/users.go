package storage

import (
	"encoding/json"
	"log"
	"os"
	"strings"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type User struct {
	Name         string `json:"name"`
	FirstSeen    string `json:"first_seen"`
	MessageCount int    `json:"message_count"`
	LastMessage  string `json:"last_message"`
}

// –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
var users = make(map[string]*User)

// –§–∞–π–ª —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userDBFile = "users.json"

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞
func LoadUsers() {
	file, err := os.Open(userDBFile)
	if err != nil {
		log.Println("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª:", err)
		return
	}
	defer file.Close()

	err = json.NewDecoder(file).Decode(&users)
	if err != nil {
		log.Println("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ users.json:", err)
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
func saveUsers() {
	file, err := os.Create(userDBFile)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è users.json:", err)
		return
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ") // –ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥
	err = encoder.Encode(users)
	if err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª:", err)
	}
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func UpdateUser(nickname, message string) {
	if user, exists := users[nickname]; exists {
		user.MessageCount++
		user.LastMessage = message
		DetectName(nickname, message)
	} else {
		users[nickname] = &User{
			Name:         "", // –ë—É–¥–µ–º –∑–∞–ø–æ–ª–Ω—è—Ç—å –ø–æ–∑–∂–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—Å—è
			FirstSeen:    time.Now().Format(time.RFC3339),
			MessageCount: 1,
			LastMessage:  message,
		}
		DetectName(nickname, message)
	}
	saveUsers()
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ (–µ—Å–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è)
func DetectName(nickname, message string) {
	if users[nickname] != nil && users[nickname].Name == "" {
		message = strings.ToLower(strings.TrimSpace(message)) // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É

		if strings.HasPrefix(message, "–º–µ–Ω—è –∑–æ–≤—É—Ç") {
			name := strings.TrimSpace(strings.TrimPrefix(message, "–º–µ–Ω—è –∑–æ–≤—É—Ç"))
			if len(name) > 1 {
				users[nickname].Name = name
				log.Println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è:", users[nickname].Name)
				saveUsers()
			}
		} else if strings.HasPrefix(message, "—è -") {
			name := strings.TrimSpace(strings.TrimPrefix(message, "—è -"))
			if len(name) > 1 {
				users[nickname].Name = name
				log.Println("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è:", users[nickname].Name)
				saveUsers()
			}
		}
	}
}
